{
  "stats": {
    "suites": 2,
    "tests": 2,
    "passes": 2,
    "pending": 0,
    "failures": 0,
    "start": "2025-08-20T10:23:05.680Z",
    "end": "2025-08-20T10:23:05.734Z",
    "duration": 54,
    "testsRegistered": 2,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "75112d6a-8815-4095-94f5-ad366142a38c",
      "title": "",
      "fullFile": "C:\\Projetos\\Mentoria 2.0\\portfolio_pessoal\\tests\\cadastro.de.usuario.test.js",
      "file": "\\cadastro.de.usuario.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "692c086b-36ad-445a-aed2-3cc4a9c21102",
          "title": "Cadastro de usuário",
          "fullFile": "C:\\Projetos\\Mentoria 2.0\\portfolio_pessoal\\tests\\cadastro.de.usuario.test.js",
          "file": "\\cadastro.de.usuario.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "23a82353-e592-42bf-b5d3-2e8db110affc",
              "title": "POST / Cadastro de usuário",
              "fullFile": "C:\\Projetos\\Mentoria 2.0\\portfolio_pessoal\\tests\\cadastro.de.usuario.test.js",
              "file": "\\cadastro.de.usuario.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Cadastro de usuário com sucesso deverá retornar o ID do usuário",
                  "fullTitle": "Cadastro de usuário POST / Cadastro de usuário Cadastro de usuário com sucesso deverá retornar o ID do usuário",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const novoUsuario = gerarUsuarioFalso()\nconsole.log(novoUsuario)\nconst response= await request(process.env.BASE_URL)\n    .post('/users')\n    .set('Content-Type', 'application/json')\n    .send(novoUsuario)\n    expect(response.status).to.be.equal(201)\n    expect(response.body.message).to.equal('Usuário cadastrado com sucesso')",
                  "err": {},
                  "uuid": "6f104860-8e7c-4848-bc55-15df8e1155c5",
                  "parentUUID": "23a82353-e592-42bf-b5d3-2e8db110affc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deverá permitir cadastro com CPF duplicado",
                  "fullTitle": "Cadastro de usuário POST / Cadastro de usuário Não deverá permitir cadastro com CPF duplicado",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const novoUsuario1 = gerarUsuarioFalso();\nconst novoUsuario2 = { ...novoUsuario1, nome: \"João Silva\" }; // Segundo usuário com o mesmo CPF\nawait request(process.env.BASE_URL)\n    .post('/users')\n    .set('Content-Type', 'application/json')\n    .send(novoUsuario1)\nconst response= await request(process.env.BASE_URL)\n    .post('/users')\n    .set('Content-Type', 'application/json')\n    .send(novoUsuario2)\n    expect(response.status).to.be.equal(409)\n    expect(response.body.message).to.equal('Já existe um usuário com este CPF.')",
                  "err": {},
                  "uuid": "cf52af0d-eb6a-4e6c-989e-97e129ca59e0",
                  "parentUUID": "23a82353-e592-42bf-b5d3-2e8db110affc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6f104860-8e7c-4848-bc55-15df8e1155c5",
                "cf52af0d-eb6a-4e6c-989e-97e129ca59e0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 49,
              "root": false,
              "rootEmpty": false,
              "_timeout": 200000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 200000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}