{
  "stats": {
    "suites": 2,
    "tests": 20,
    "passes": 20,
    "pending": 0,
    "failures": 0,
    "start": "2025-08-21T23:53:11.221Z",
    "end": "2025-08-21T23:53:11.321Z",
    "duration": 100,
    "testsRegistered": 20,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "3e2303f1-73b6-4b8a-987e-2142bb9ac131",
      "title": "",
      "fullFile": "C:\\Projetos\\Mentoria 2.0\\portfolio_pessoal\\tests\\cadastro.de.usuario.test.js",
      "file": "\\cadastro.de.usuario.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "00f4321b-8561-4d0a-bfea-07416a4f9b4f",
          "title": "Cadastro de usuário",
          "fullFile": "C:\\Projetos\\Mentoria 2.0\\portfolio_pessoal\\tests\\cadastro.de.usuario.test.js",
          "file": "\\cadastro.de.usuario.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e50091a1-4435-4aeb-8c0c-a728de7a3bc7",
              "title": "POST / Cadastro de usuário",
              "fullFile": "C:\\Projetos\\Mentoria 2.0\\portfolio_pessoal\\tests\\cadastro.de.usuario.test.js",
              "file": "\\cadastro.de.usuario.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Cadastro de usuário com sucesso deverá retornar o ID do usuário",
                  "fullTitle": "Cadastro de usuário POST / Cadastro de usuário Cadastro de usuário com sucesso deverá retornar o ID do usuário",
                  "timedOut": false,
                  "duration": 39,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const novoUsuario = gerarUsuarioFalso()\nconst response = await request(process.env.BASE_URL)\n    .post('/users')\n    .set('Content-Type', 'application/json')\n    .send(novoUsuario)\nexpect(response.status).to.be.equal(201)\nexpect(response.body.message).to.equal('Usuário cadastrado com sucesso')",
                  "err": {},
                  "uuid": "c674fc7b-992a-41b5-9461-b950e5756bf2",
                  "parentUUID": "e50091a1-4435-4aeb-8c0c-a728de7a3bc7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deverá permitir cadastro de usuário com CPF duplicado",
                  "fullTitle": "Cadastro de usuário POST / Cadastro de usuário Não deverá permitir cadastro de usuário com CPF duplicado",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const novoUsuario1 = gerarUsuarioFalso();\nconst novoUsuario2 = { ...novoUsuario1, nome: \"João Silva\" }; // Novo usuário com o mesmo CPF duplicado\nawait request(process.env.BASE_URL)\n    .post('/users')\n    .set('Content-Type', 'application/json')\n    .send(novoUsuario1)\nconst response = await request(process.env.BASE_URL)\n    .post('/users')\n    .set('Content-Type', 'application/json')\n    .send(novoUsuario2)\nexpect(response.status).to.be.equal(409)\nexpect(response.body.message).to.equal('Já existe um usuário com este CPF.')",
                  "err": {},
                  "uuid": "e14e1a72-def5-4d9d-b230-77aa3d726890",
                  "parentUUID": "e50091a1-4435-4aeb-8c0c-a728de7a3bc7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deverá permitir cadastro de usuário com CPF não numérico",
                  "fullTitle": "Cadastro de usuário POST / Cadastro de usuário Não deverá permitir cadastro de usuário com CPF não numérico",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const novoUsuario = gerarUsuarioFalso();\nconst novoUsuarioCPFInvalido = { ...novoUsuario, cpf: \"0a2s3d4f5g1\" }; // Novo usuário com CPF não numerico\nconst response = await request(process.env.BASE_URL)\n    .post('/users')\n    .set('Content-Type', 'application/json')\n    .send(novoUsuarioCPFInvalido)\nexpect(response.status).to.be.equal(400)\nexpect(response.body.message).to.equal('CPF é obrigatório e deve conter exatamente 11 dígitos numéricos.')",
                  "err": {},
                  "uuid": "693cd351-79f7-4909-9f95-39cb100ec47a",
                  "parentUUID": "e50091a1-4435-4aeb-8c0c-a728de7a3bc7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deverá permitir cadastro de usuário com nome com menos de 3 caracteres",
                  "fullTitle": "Cadastro de usuário POST / Cadastro de usuário Não deverá permitir cadastro de usuário com nome com menos de 3 caracteres",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const novoUsuario = gerarUsuarioFalso();\nconst novoUsuarioNomeComMenosDeTresCaracteres = { ...novoUsuario, nome: \"Ab\" }; // Novo usuário com nome com menos de 3 caracteres\nconst response = await request(process.env.BASE_URL)\n    .post('/users')\n    .set('Content-Type', 'application/json')\n    .send(novoUsuarioNomeComMenosDeTresCaracteres)\nexpect(response.status).to.be.equal(400)\nexpect(response.body.message).to.equal('Nome é obrigatório e deve conter entre 3 e 100 caracteres.')",
                  "err": {},
                  "uuid": "2c5f2133-1f89-45f8-9e7f-44d2d8d05740",
                  "parentUUID": "e50091a1-4435-4aeb-8c0c-a728de7a3bc7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deverá permitir cadastro de usuário com nome com mais de 100 caracteres",
                  "fullTitle": "Cadastro de usuário POST / Cadastro de usuário Não deverá permitir cadastro de usuário com nome com mais de 100 caracteres",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const novoUsuario = gerarUsuarioFalso();\nconst novoUsuarioNomeComMaisDeCemCaracteres = { ...novoUsuario, nome: \"Maximilliano Frederico Antônio Luiz Henrique Sebastião da Silva Monteiro Albuquerque da Souza de Lima\" }; // Novo usuário com nome com mais de 100 caracteres\nconst response = await request(process.env.BASE_URL)\n    .post('/users')\n    .set('Content-Type', 'application/json')\n    .send(novoUsuarioNomeComMaisDeCemCaracteres)\nexpect(response.status).to.be.equal(400)\nexpect(response.body.message).to.equal('Nome é obrigatório e deve conter entre 3 e 100 caracteres.')",
                  "err": {},
                  "uuid": "0fd7850e-f4d0-4466-893c-d65196fc31a7",
                  "parentUUID": "e50091a1-4435-4aeb-8c0c-a728de7a3bc7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deverá permitir cadastro de usuário sem preencher data de nascimento",
                  "fullTitle": "Cadastro de usuário POST / Cadastro de usuário Não deverá permitir cadastro de usuário sem preencher data de nascimento",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const novoUsuario = gerarUsuarioFalso();\nconst novoUsuarioSemDataDeNascimento = { ...novoUsuario, dataNascimento: \"\" }; // Novo usuário sem preencher data de nascimento\nconst response = await request(process.env.BASE_URL)\n    .post('/users')\n    .set('Content-Type', 'application/json')\n    .send(novoUsuarioSemDataDeNascimento)\nexpect(response.status).to.be.equal(400)\nexpect(response.body.message).to.equal('Data de nascimento é obrigatória e deve estar no formato dd/mm/aaaa.')",
                  "err": {},
                  "uuid": "60908b13-8ca2-44c0-b0a1-397c2e7d7bf2",
                  "parentUUID": "e50091a1-4435-4aeb-8c0c-a728de7a3bc7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deverá permitir cadastro de usuário com data de nascimento no formato invalido",
                  "fullTitle": "Cadastro de usuário POST / Cadastro de usuário Não deverá permitir cadastro de usuário com data de nascimento no formato invalido",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const novoUsuario = gerarUsuarioFalso();\nconst novoUsuarioComDataDeNascimentoFormatoInvalido = { ...novoUsuario, dataNascimento: \"\" }; // Novo usuário com data de nascimento no formato invalido\nconst response = await request(process.env.BASE_URL)\n    .post('/users')\n    .set('Content-Type', 'application/json')\n    .send(novoUsuarioComDataDeNascimentoFormatoInvalido)\nexpect(response.status).to.be.equal(400)\nexpect(response.body.message).to.equal('Data de nascimento é obrigatória e deve estar no formato dd/mm/aaaa.')",
                  "err": {},
                  "uuid": "8f2cb736-b1a0-48ce-a27a-6a54afbf794b",
                  "parentUUID": "e50091a1-4435-4aeb-8c0c-a728de7a3bc7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deverá permitir cadastro de usuário menor de 18 anos",
                  "fullTitle": "Cadastro de usuário POST / Cadastro de usuário Não deverá permitir cadastro de usuário menor de 18 anos",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const novoUsuario = gerarUsuarioFalso();\nconst novoUsuarioMenorDeDezoitoAnos = { ...novoUsuario, dataNascimento: \"01/01/2025\" }; // Novo usuário com menor de 18 anos\nconst response = await request(process.env.BASE_URL)\n    .post('/users')\n    .set('Content-Type', 'application/json')\n    .send(novoUsuarioMenorDeDezoitoAnos)\nexpect(response.status).to.be.equal(400)\nexpect(response.body.message).to.equal('Usuário deve ter 18 anos ou mais para se cadastrar.')",
                  "err": {},
                  "uuid": "28114865-738f-4a00-b2c9-13dae8adc84a",
                  "parentUUID": "e50091a1-4435-4aeb-8c0c-a728de7a3bc7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deverá permitir cadastro de usuário com senha de menos de 5 caracteres",
                  "fullTitle": "Cadastro de usuário POST / Cadastro de usuário Não deverá permitir cadastro de usuário com senha de menos de 5 caracteres",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const novoUsuario = gerarUsuarioFalso();\nconst novoUsuarioSenhaComMenosDeCincoCaracteres = { ...novoUsuario, senha: \"a1s2\" }; // Novo usuário com senha menor de 5 caracteres\nconst novoUsuarioSenhaComMenosDeCincoCaracteres2 = { ...novoUsuarioSenhaComMenosDeCincoCaracteres, confirmaSenha: \"a1s2\" }; // Novo usuário com validação senha menor de 5 caracteres\n\nconst response = await request(process.env.BASE_URL)\n    .post('/users')\n    .set('Content-Type', 'application/json')\n    .send(novoUsuarioSenhaComMenosDeCincoCaracteres2)\nexpect(response.status).to.be.equal(400)\nexpect(response.body.message).to.equal('Senha é obrigatória, deve ser alfanumérica e conter entre 5 e 12 caracteres.')",
                  "err": {},
                  "uuid": "42e02026-7e5f-4dd8-9b81-37d4f42f0768",
                  "parentUUID": "e50091a1-4435-4aeb-8c0c-a728de7a3bc7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deverá permitir cadastro de usuário com senha maior de 12 caracteres",
                  "fullTitle": "Cadastro de usuário POST / Cadastro de usuário Não deverá permitir cadastro de usuário com senha maior de 12 caracteres",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const novoUsuario = gerarUsuarioFalso();\nconst novoUsuarioSenhaComMaisDeDozeCaracteres = { ...novoUsuario, senha: \"a1s2d3f4g5h6j\" }; // Novo usuário com senha maior de 12 caracteres\nconst novoUsuarioSenhaComMaisDeDozeCaracteres2 = { ...novoUsuarioSenhaComMaisDeDozeCaracteres, confirmaSenha: \"a1s2d3f4g5h6j\" }; // Novo usuário com confirma senha maior de 12 caracteres\nconst response = await request(process.env.BASE_URL)\n    .post('/users')\n    .set('Content-Type', 'application/json')\n    .send(novoUsuarioSenhaComMaisDeDozeCaracteres2)\nexpect(response.status).to.be.equal(400)\nexpect(response.body.message).to.equal('Senha é obrigatória, deve ser alfanumérica e conter entre 5 e 12 caracteres.')",
                  "err": {},
                  "uuid": "d5acccb8-e954-42f1-99da-07b359fef5dd",
                  "parentUUID": "e50091a1-4435-4aeb-8c0c-a728de7a3bc7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deverá permitir cadastro de usuário com validação senha incorreta",
                  "fullTitle": "Cadastro de usuário POST / Cadastro de usuário Não deverá permitir cadastro de usuário com validação senha incorreta",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const novoUsuario = gerarUsuarioFalso();\nconst novoUsuarioValidacaoSenhaInvalida = { ...novoUsuario, senha: \"a1s2d3f4g5h6\" }; // Novo usuário com validação senha incorreta\n           \nconst response = await request(process.env.BASE_URL)\n    .post('/users')\n    .set('Content-Type', 'application/json')\n    .send(novoUsuarioValidacaoSenhaInvalida)\nexpect(response.status).to.be.equal(400)\nexpect(response.body.message).to.equal('Confirmação de senha é obrigatória e deve ser igual à senha.')",
                  "err": {},
                  "uuid": "d537e61e-300a-4a10-85d0-091cc94b62b6",
                  "parentUUID": "e50091a1-4435-4aeb-8c0c-a728de7a3bc7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deverá permitir cadastro de usuário com email em formato invalido",
                  "fullTitle": "Cadastro de usuário POST / Cadastro de usuário Não deverá permitir cadastro de usuário com email em formato invalido",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const novoUsuario = gerarUsuarioFalso();\nconst novoUsuarioEmailFormatoInvalido = { ...novoUsuario, email: \"email.fomato.invalido\" }; // Novo usuário com email em formato invalido\nconst response = await request(process.env.BASE_URL)\n    .post('/users')\n    .set('Content-Type', 'application/json')\n    .send(novoUsuarioEmailFormatoInvalido)\nexpect(response.status).to.be.equal(400)\nexpect(response.body.message).to.equal('E-mail é obrigatório e deve possuir um formato válido.')",
                  "err": {},
                  "uuid": "9ac283c9-08cd-4eaa-bb5e-0bc2adb77e4e",
                  "parentUUID": "e50091a1-4435-4aeb-8c0c-a728de7a3bc7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deverá permitir cadastro de usuário com endereço com menos de 3 caracteres",
                  "fullTitle": "Cadastro de usuário POST / Cadastro de usuário Não deverá permitir cadastro de usuário com endereço com menos de 3 caracteres",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const novoUsuario = gerarUsuarioFalso();\nconst novoUsuarioEnderecoMenorTresCaracteres = { ...novoUsuario, endereco: \"Ab\" }; // Novo usuário com endereço com menos de 3 caracteres\nconst response = await request(process.env.BASE_URL)\n    .post('/users')\n    .set('Content-Type', 'application/json')\n    .send(novoUsuarioEnderecoMenorTresCaracteres)\nexpect(response.status).to.be.equal(400)\nexpect(response.body.message).to.equal('Endereço deve conter entre 3 e 200 caracteres quando informado.')",
                  "err": {},
                  "uuid": "fb35096f-9686-4ac0-9e31-e9255becbe87",
                  "parentUUID": "e50091a1-4435-4aeb-8c0c-a728de7a3bc7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deverá permitir cadastro de usuário com endereço com mais de 200 caracteres",
                  "fullTitle": "Cadastro de usuário POST / Cadastro de usuário Não deverá permitir cadastro de usuário com endereço com mais de 200 caracteres",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const novoUsuario = gerarUsuarioFalso();\nconst novoUsuarioEnderecoMaisDuzentosCaracteres = { ...novoUsuario, endereco: \"Avenida Prof. Doutor Engenheiro Joaquim da Costa e Silva, nº 4721, Bloco D, Apto 1803, Condomínio Jardim Imperial do Sol Nascente, Bairro Monte das Oliveiras, CEP 72345-678, Campo Sereno, Goiás, Brasil\" }; // Novo usuário com endereço com mais de 200 caracteres\nconst response = await request(process.env.BASE_URL)\n    .post('/users')\n    .set('Content-Type', 'application/json')\n    .send(novoUsuarioEnderecoMaisDuzentosCaracteres)\nexpect(response.status).to.be.equal(400)\nexpect(response.body.message).to.equal('Endereço deve conter entre 3 e 200 caracteres quando informado.')",
                  "err": {},
                  "uuid": "21c41bc6-24bd-40d5-8b57-63d6b2f79700",
                  "parentUUID": "e50091a1-4435-4aeb-8c0c-a728de7a3bc7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deverá permitir cadastro de usuário com cidade com menos de 3 caracteres",
                  "fullTitle": "Cadastro de usuário POST / Cadastro de usuário Não deverá permitir cadastro de usuário com cidade com menos de 3 caracteres",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const novoUsuario = gerarUsuarioFalso();\nconst novoUsuarioCidadeMenorTresCaracteres = { ...novoUsuario, cidade: \"Ab\" }; // Novo usuário com cidade com menos de 3 caracteres\nconst response = await request(process.env.BASE_URL)\n    .post('/users')\n    .set('Content-Type', 'application/json')\n    .send(novoUsuarioCidadeMenorTresCaracteres)\nexpect(response.status).to.be.equal(400)\nexpect(response.body.message).to.equal('Cidade deve conter entre 3 e 100 caracteres quando informada.')",
                  "err": {},
                  "uuid": "bbee2fbe-6ae1-4945-8d93-71bd4a68eacb",
                  "parentUUID": "e50091a1-4435-4aeb-8c0c-a728de7a3bc7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deverá permitir cadastro de usuário com endereço com mais de 200 caracteres",
                  "fullTitle": "Cadastro de usuário POST / Cadastro de usuário Não deverá permitir cadastro de usuário com endereço com mais de 200 caracteres",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const novoUsuario = gerarUsuarioFalso();\nconst novoUsuarioCidadeMaisCemCaracteres = { ...novoUsuario, cidade: \"Santa Margarida das Colinas Douradas do Vale Encantado São Jerônimo das Águas Claras Serenas do Norte\" }; // Novo usuário com cidade com mais de 100 caracteres\nconst response = await request(process.env.BASE_URL)\n    .post('/users')\n    .set('Content-Type', 'application/json')\n    .send(novoUsuarioCidadeMaisCemCaracteres)\nexpect(response.status).to.be.equal(400)\nexpect(response.body.message).to.equal('Cidade deve conter entre 3 e 100 caracteres quando informada.')",
                  "err": {},
                  "uuid": "da490bcf-6753-4525-9796-7f9d0136b14d",
                  "parentUUID": "e50091a1-4435-4aeb-8c0c-a728de7a3bc7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deverá permitir cadastro de usuário com sigla do estado com menos de 2 caracteres",
                  "fullTitle": "Cadastro de usuário POST / Cadastro de usuário Não deverá permitir cadastro de usuário com sigla do estado com menos de 2 caracteres",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const novoUsuario = gerarUsuarioFalso();\nconst novoUsuarioSiglaEstadoMenorDoisCaracteres = { ...novoUsuario, estado: \"A\" }; // com sigla do estado com menos de 2 caracteres\nconst response = await request(process.env.BASE_URL)\n    .post('/users')\n    .set('Content-Type', 'application/json')\n    .send(novoUsuarioSiglaEstadoMenorDoisCaracteres)\nexpect(response.status).to.be.equal(400)\nexpect(response.body.message).to.equal('Estado deve ser informado com 2 letras (sigla), quando informado.')",
                  "err": {},
                  "uuid": "2dac9034-858e-4dae-9d37-a6e75974e2ef",
                  "parentUUID": "e50091a1-4435-4aeb-8c0c-a728de7a3bc7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deverá permitir cadastro de usuário com sigla do estado com mais de 2 caracteres",
                  "fullTitle": "Cadastro de usuário POST / Cadastro de usuário Não deverá permitir cadastro de usuário com sigla do estado com mais de 2 caracteres",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const novoUsuario = gerarUsuarioFalso();\nconst novoUsuarioSiglaEstadoMaiorDoisCaracteres = { ...novoUsuario, estado: \"ABC\" }; // Novo usuário com sigla do estado com mais de 2 caracteres\nconst response = await request(process.env.BASE_URL)\n    .post('/users')\n    .set('Content-Type', 'application/json')\n    .send(novoUsuarioSiglaEstadoMaiorDoisCaracteres)\nexpect(response.status).to.be.equal(400)\nexpect(response.body.message).to.equal('Estado deve ser informado com 2 letras (sigla), quando informado.')",
                  "err": {},
                  "uuid": "bddc3b84-6416-4132-9a9b-dc9ddfff7f60",
                  "parentUUID": "e50091a1-4435-4aeb-8c0c-a728de7a3bc7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deverá permitir cadastro de usuário com numero de telefone com menos de 11 caracteres",
                  "fullTitle": "Cadastro de usuário POST / Cadastro de usuário Não deverá permitir cadastro de usuário com numero de telefone com menos de 11 caracteres",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const novoUsuario = gerarUsuarioFalso();\nconst novoUsuarioNUmeroTelefoneMenorOnzeCaracteres = { ...novoUsuario, telefone: \"(11)11111111\" }; // com numero de telefone com menos de 11 caracteres\nconst response = await request(process.env.BASE_URL)\n    .post('/users')\n    .set('Content-Type', 'application/json')\n    .send(novoUsuarioNUmeroTelefoneMenorOnzeCaracteres)\nexpect(response.status).to.be.equal(400)\nexpect(response.body.message).to.equal('Telefone deve conter 11 dígitos (incluindo DDD), quando informado.')",
                  "err": {},
                  "uuid": "1b6abfb7-6dde-46f1-8de6-fbb7e1afd61d",
                  "parentUUID": "e50091a1-4435-4aeb-8c0c-a728de7a3bc7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deverá permitir cadastro de usuário com numero de telefone com mais de 11 caracteres",
                  "fullTitle": "Cadastro de usuário POST / Cadastro de usuário Não deverá permitir cadastro de usuário com numero de telefone com mais de 11 caracteres",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const novoUsuario = gerarUsuarioFalso();\nconst novoUsuarioNUmeroTelefoneMaiorOnzeCaracteres = { ...novoUsuario, telefone: \"(22)2222222222)\" }; // Novo usuário com numero de telefone com mais de 11 caracteres\nconst response = await request(process.env.BASE_URL)\n    .post('/users')\n    .set('Content-Type', 'application/json')\n    .send(novoUsuarioNUmeroTelefoneMaiorOnzeCaracteres)\nexpect(response.status).to.be.equal(400)\nexpect(response.body.message).to.equal('Telefone deve conter 11 dígitos (incluindo DDD), quando informado.')",
                  "err": {},
                  "uuid": "d8775169-1a3c-4c5a-8779-a483ed87fd9c",
                  "parentUUID": "e50091a1-4435-4aeb-8c0c-a728de7a3bc7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c674fc7b-992a-41b5-9461-b950e5756bf2",
                "e14e1a72-def5-4d9d-b230-77aa3d726890",
                "693cd351-79f7-4909-9f95-39cb100ec47a",
                "2c5f2133-1f89-45f8-9e7f-44d2d8d05740",
                "0fd7850e-f4d0-4466-893c-d65196fc31a7",
                "60908b13-8ca2-44c0-b0a1-397c2e7d7bf2",
                "8f2cb736-b1a0-48ce-a27a-6a54afbf794b",
                "28114865-738f-4a00-b2c9-13dae8adc84a",
                "42e02026-7e5f-4dd8-9b81-37d4f42f0768",
                "d5acccb8-e954-42f1-99da-07b359fef5dd",
                "d537e61e-300a-4a10-85d0-091cc94b62b6",
                "9ac283c9-08cd-4eaa-bb5e-0bc2adb77e4e",
                "fb35096f-9686-4ac0-9e31-e9255becbe87",
                "21c41bc6-24bd-40d5-8b57-63d6b2f79700",
                "bbee2fbe-6ae1-4945-8d93-71bd4a68eacb",
                "da490bcf-6753-4525-9796-7f9d0136b14d",
                "2dac9034-858e-4dae-9d37-a6e75974e2ef",
                "bddc3b84-6416-4132-9a9b-dc9ddfff7f60",
                "1b6abfb7-6dde-46f1-8de6-fbb7e1afd61d",
                "d8775169-1a3c-4c5a-8779-a483ed87fd9c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 89,
              "root": false,
              "rootEmpty": false,
              "_timeout": 200000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 200000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}